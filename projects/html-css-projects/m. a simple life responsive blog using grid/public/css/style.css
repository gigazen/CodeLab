/* Mobile-first Approach  */
/****************************** 
General Basics 
*******************************/
html {
  box-sizing: border-box;
  font-size: 1.125rem; /* font size 18px */
}

* {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

body {
  font-family: "Ubuntu", sans-serif;
  font-weight: 300;
  line-height: 1.6;
}

img {
  max-width: 100%;
  display: block;
}

.image-full {
  max-height: 300px;
  width: 100%;
  object-fit: cover;
  margin-bottom: 2em;
}

/****************************** 
Typography 
*******************************/
/* first keep the general element selectors, then keep the specific selectors with class names */
h1,
h2,
h3 {
  font-family: "Lora", serif;
  /* always use number for font-weight instead of keyword, as different keyword works differently in different browsers */
  font-weight: 400;
  color: #143774;
}

h1 {
  font-size: 2rem;
}

h3 {
  color: #1792d2;
}

strong {
  font-weight: 700;
}

a {
  color: #1792d2;
  text-decoration: none;
}

a:hover,
a:focus {
  color: #143774;
  text-decoration: underline;
}

p {
  color: #707070;
  margin: 1em 0;
}

/* subtitle with h1 in header */
.subtitle {
  color: #1792d2;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 2.2px;
}

/* title of each article */
.article-title {
  font-size: 1.5rem;
}

/* continue reading, date, number of comments */
.article-read-more,
.article-info {
  font-size: 0.875rem;
}

/****************************** 
Layout 
*******************************/
/* general container, wrapping every section of page separately so that they can be of same width */
.container {
  width: 90%;
  max-width: 900px;
  margin: 0 auto;
}

/* there can be some containers without display flex, so create a modifier like, container-flex for containers with flex and specifically style it */
/* for mobile first, in normal condition main and sidebar will be one below another */
.container-flex {
  display: flex;
  flex-direction: column;
  /* justify-content: space-between; */
}

header {
  background: #f8f8f8;
  padding: 4em;
  text-align: center;
  margin-bottom: 2.5em;
}

/* Navigation */
/* make the ul inside nav to align at the center vertically */
/* make the li's inside ul to come one below another in normal condition of mobile-first */
/* navigation items will be one below another instead of side by side, also at the center of page */
nav ul {
  list-style: none;
  display: flex;
  flex-direction: column;
}

/* each navigation links will be separated from one another vertically */
nav li {
  margin: 1em 0;
}

/* nav link texts are contained in li > a, font weight and padding cannot be inherited so must be applied to the direct parent containing text */
nav a {
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 1px;
  padding: 0.25em 0;
}

/* make the current page link to be grey with underline */
/* inside nav of each page, the li which holds current-page class, that li will be in grey color and a border will appear underneath it and upon hovering, it will remain same with default grey color and border */
nav .current-page {
  border-bottom: 1px solid #707070;
  color: #707070;
}

/* except current page, each li or link upon hovering will turn green */
nav a:hover,
nav a:focus {
  color: #1792d2;
}

/* to override green upon hovering, current page hovering must come after it, not before */
/* as IICE : Inline > ID > Class > Element, so class has more specificity than element that's why style applied on current-page class overwrites common style applied on anchor elements */
.current-page:hover {
  color: #707070;
  text-decoration: none;
}

/* articles */

/* continue reading */
.article-read-more {
  color: #1792d2;
  text-decoration: none;
  font-weight: 700;
  display: inline-block;
  margin: 1.5em 0;
  text-transform: uppercase;
}

.article-read-more:hover,
.article-read-more:focus {
  color: #143774;
  text-decoration: underline;
}

.article-info {
  margin: 2em 0 0.8rem 0;
}

.article-featured {
  border-bottom: 1px solid #707070;
}

/* for mobile-first, in normal condition articles will have image and text one below another */
.article-recent {
  margin-top: 2em;
  /* prevent margin collapsing of normal block elements by converting into a grid container */
  display: grid;
  /* for very small to medium screen, image and text should shrink and expand acc. to screen width so set their width as 1fr. But keep the width of date info same as its longest word width i.e. set it to min-content */
  grid-template-columns: 1fr min-content;
  grid-template-areas:
    "image image"
    "title info"
    "body body"
    "read-more .";
  /* give a column gap so that article title and info do not collide each other, don't give row gap unnecessarily*/
  gap: 0 1em;
}

.article-image {
  grid-area: image;
}
.article-title {
  grid-area: title;
}
.article-info {
  grid-area: info;
  justify-self: end;
}
.article-body {
  grid-area: body;
}
.article-read-more {
  grid-area: read-more;
}

/* keep the base of first line of article title and info in same line */
.article-title,
.article-info {
  align-self: baseline;
}

/* widgets on sidebar */
.sidebar-widget {
  border: 20px solid #ebebeb;
  padding: 1em;
  margin-bottom: 2em;
}

.sidebar-widget p {
  margin: 2rem 0 1rem 0;
}

.sidebar-widget h2 {
  font-size: 1rem;
}

.widget-title,
.widget-recent-post-title {
  font-size: 1.125rem;
  line-height: 1.4;
}

.widget-title {
  font-family: "Ubuntu", sans-serif;
  font-weight: 700;
  letter-spacing: 1.8px;
}

.widget-recent-post {
  display: flex;
  flex-direction: column;
  margin-bottom: 2em;
  border-bottom: 2px solid #707070;
}

/* if widget-recent-post is the last child of sidebar-widget parent then make border, margin 0. But if any element say, <p>Example</p> is the last child then last widget-recent-post will have border and margin */
.widget-recent-post:last-child {
  border: 0;
  margin: 0;
}

.widget-image {
  order: -1;
}

.widget-recent-post-title {
  margin: 1em 0 1em 0;
  color: #143774;
}

/* footer */
footer {
  background: #143774;
  text-align: center;
  padding: 3em 0;
}

footer p {
  color: rgba(255, 255, 255, 0.65);
}

/* Responsiveness */
/* Mobile-first Design so have to use min-width */
@media screen and (min-width: 750px) {
  header {
    padding: 4em 0em;
  }
  nav {
    display: flex;
    flex-direction: column;
    justify-content: center;
    font-size: 0.73rem;
  }

  nav ul {
    flex-direction: row;
    justify-content: flex-end;
  }

  nav li {
    margin-left: 2em;
  }

  /* for larger screen, main section and sidebar will be side by side, font-size of them will be smaller */
  /* set main as 70% and sidebar as 25% of container width. Remaining 5% bring to the middle of them */
  .container-flex {
    flex-direction: row;
    justify-content: space-between;
  }

  main {
    width: 70%;
    font-size: 0.95rem;
  }

  /* for medium screen size, prevent the sidebar width getting too small by fixing a minimum width for it. But if we set min width for aside then even after using justify-content: space-between, main and aside will collide for some smaller screen sizes. Fix it by giving a min distance between main and aside, like a margin on left of aside */
  aside {
    width: 25%;
    min-width: 200px;
    margin-left: 1em;
  }
}

@media (min-width: 750px) {
  /* for larger screens, image and text inside recent articles will be side by side */
  .article-recent {
    /* for medium screen, keep a minimum width for image and text otherwise it will shrink badly. For larger screen, limit the image width otherwise it will expand badly, but don't limit the text container */
    grid-template-columns: minmax(100px, 250px) minmax(300px, 1fr);
    grid-template-areas:
      "image title"
      "image body"
      "image read-more"
      "info .";
  }

  .article-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .article-info {
    justify-self: start;
  }

  /* images inside recent articles should be longer, not tiny */
  .article-image {
    /* width: 100%; */
    min-height: 250px;
    /* object-fit cover makes the image larger while keeping aspect ratio. But crops any extra part of image outside its own specified content box */
    /* cannot use object-fit: contain as it will make the image small to avoid cropping i.e. contains full image within its own specified content box */
    object-fit: cover;
    /* using object-position left can align to the left side of the image within its own content box */
    /* object-position: left; */
  }

  /* for larger screens, image and date info of featured article will come first then all the texts. For this to happen, make the featured article a flexbox then change orders */
  /* default order of flex items is 0. So flex item with -ve order comes before those default ordered items. More -ve order, more before */
  .article-featured {
    display: flex;
    flex-direction: column;
  }
  .article-image {
    order: -2;
  }
  .article-info {
    order: -1;
  }
}
