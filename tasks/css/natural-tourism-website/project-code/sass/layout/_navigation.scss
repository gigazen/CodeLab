// NAVIGATION SCREEN, MENUS AND HAMBURGER BUTTON
.navigation {
  &__checkbox {
    // hide the checkbox, but use it's :checked pseudo class to sense click on label containing hamburger button and reveal the hidden navigation screen
    display: none;
  }

  &__button {
    // make hamburger button 1rem wider than below round background so that in normal condn button can hide the background underneath. Only upon clicking the button, enlarged round background reveals
    height: 7rem;
    width: 7rem;
    border-radius: 50%;
    // using fixed position, element will be out of flow, but unlike absolute it does not change position with scroll, fixed on page. Also unlike absolute, fixed position does not need relative position for parent
    position: fixed;
    top: 6rem;
    right: 6rem;
    background-color: $color-white;
    z-index: 2000;
    box-shadow: 0 1rem 3rem rgba($color-black, 0.1);
    text-align: center;
    cursor: pointer;

    @include respond(tab-port) {
      top: 4rem;
      right: 4rem;
    }

    @include respond(phone) {
      top: 3rem;
      right: 3rem;
    }
  }

  // in normal condn nav background is small circle and hides behind hamburger button of label. Upon clicking the button small circle scales up to big circle and takes up whole viewport. Above nav background, nav list appears, both are fixed, takes whole viewport
  &__background {
    height: 6rem;
    width: 6rem;
    border-radius: 50%;
    position: fixed;
    // button is 1rem wider so to hide background beneath it, push the background extra .5rem downwards and .5rem leftwards
    top: 6.5rem;
    right: 6.5rem;
    // radial gradient starts from middle of an element and grows to all outside directions from there, whereas linear gradient goes from one side to other
    background-image: radial-gradient(
      $color-primary-light 0%,
      $color-primary-dark 30%
    );
    z-index: 1000;
    // keep the transition in normal state to get smooth animation in :checked, :hover etc. states
    // Cubic bezier works as custom transition timing function. Here use cubic-bezier of easeInOutQuint easing function from easings.net
    transition: transform 0.8s cubic-bezier(0.83, 0, 0.17, 1);

    @include respond(tab-port) {
      top: 4.5rem;
      right: 4.5rem;
    }

    @include respond(phone) {
      top: 3.5rem;
      right: 3.5rem;
    }
  }

  // navigation__nav contains the navigation list, spreads over entire viewport and on top of previous navigation background
  &__nav {
    height: 100vh;
    // upon scrolling, navigation list container shouldn't move, using top left 0 position w.r.t. viewport center the absolute positioned list inside this container
    position: fixed;
    top: 0;
    left: 0;
    // top to bottom : hamburger button > navigation list container > navigation background
    z-index: 1500;

    // normally nav list container is hidden, element will be on page if we just use opacity 0, that's why also make the width 0. Cannot use visibility: hidden then visible as unlike opacity, visibility does not animate
    opacity: 0;
    width: 0%;
    // keep the transition in normal state to get smooth animation in :checked, :hover etc. states
    // Cubic bezier works as custom transition timing function. Here use cubic-bezier of easeInOutBack easing function from easings.net
    transition: all 0.8s cubic-bezier(0.68, -0.6, 0.32, 1.6);
  }

  // navigation list will be at the center of viewport
  &__list {
    @include absCenter;
    list-style: none;
    text-align: center;
    width: 100%;
  }

  &__item {
    margin: 1rem;
  }

  &__link {
    &:link,
    &:visited {
      font-size: 3rem;
      font-weight: 300;
      // anchor, a is inline element, means padding cannot be applied, so convert it to inline-block
      display: inline-block;
      padding: 1rem 2rem;
      color: $color-white;
      text-decoration: none;
      text-transform: uppercase;
      // upon hovering the nav links, link background slowly becomes white at an angle
      // 0 to 50% of background image is transparent and 50% to 100% is white, and their division line is at 120deg angle
      background-image: linear-gradient(
        120deg,
        transparent 0%,
        transparent 50%,
        $color-white 50%
      );
      // increase the background size, then size of above background-image will increase and extra part moves to the right side. But only part having content can be seen. 100% is default size
      // because of increasing background size, background color will be changed from half transparent, half white to complete transparent as white part hides to the right
      background-size: 250%;
      transition: all 0.5s;

      // give space between number and link name
      span {
        display: inline-block;
        margin-right: 1.5rem;
      }
    }
    &:hover,
    :active {
      // as extra part of background image is hidden on right side, so to view right side part of it i.e. white part, we have to shift the background image to left
      background-position: 100%;
      color: $color-primary;
      transform: translateX(
        1rem
      ); // upon hovering the link, text moves slightly to right side
    }
  }

  // FUNCTIONALITY
  // upon clicking the hamburger in label, checkbox gets checked, click sensed by :checked pseudo class selector, then nav background and nav list container becomes visible
  &__checkbox:checked ~ &__background {
    transform: scale(80);
  }

  &__checkbox:checked ~ &__nav {
    opacity: 1;
    // cannot give 100vw to width as it will then overflow body element which here has outer margin and will introduce horizontal scroll
    width: 100%;
  }

  // ICON
  // hamburger button resides in label of checkbox. 3 lines in button are 3 elements. Middle line is span element, top line is ::before pseudo element, bottom line is ::after pseudo element
  &__icon {
    position: relative;
    // to center the hamburger icon use text-center inside label element parent and to bring the icon downwards give margin-top to this span element
    margin-top: 3.5rem;

    // common style for 3 elements : 1 span i.e. navigation__icon itself, 1 before pseudo element i.e. navigation__icon::before, 1 after pseudo element i.e. navigation__icon::after
    &,
    &::before,
    &::after {
      width: 3rem;
      height: 2px;
      background-color: $color-grey-dark-3;
      // span is inline element, and here it contains nothing, that's why to make the width property work for it, have to make it inline-block
      display: inline-block;
    }

    &::before,
    &::after {
      content: "";
      // absolute positined element is positioned relative to its closest positioned ancestor. To position these pseudo elements relative to their parent, navigation__icon, give relative position to navigation__icon parent. Do not give absolute position to the span element
      // also could have done using translateY property instead of absolute positioning
      position: absolute;
      left: 0;
      // keep the transition in normal state to get smooth animation in :hover etc. states
      transition: all 0.2s;
    }

    &::before {
      top: -0.8rem;
    }

    &::after {
      top: 0.8rem;
    }
  }

  // hover over the button and hamburger top line moves up, bottom line moves down a bit, color of those lines also change
  &__button:hover &__icon::before {
    top: -1rem;
    height: 1px;
    background-color: $color-primary;
  }

  &__button:hover &__icon::after {
    top: 1rem;
    height: 1px;
    background-color: $color-primary;
  }

  &__button:hover &__icon {
    background-color: $color-primary;
  }

  // upon clicking the button, hamburger icon should become a cross. For this rotate the ::before and ::after pseudo elements and hide the span element in middle
  &__checkbox:checked + &__button &__icon {
    // as ::before and ::after both depend on span or navigation__icon, that's why cannot use opacity 0 or visibility hidden to hide the span element. But can make it's background color from grey to transparent. This transparent background property of span element will not propagate to ::before and ::after of span element
    background-color: transparent;

    &::before {
      // upon clicking rotate the before element 135deg clockwise to make cross
      transform: rotate(180deg-45deg);
      top: 0; // no upward movement
      height: 1px;
    }

    &::after {
      // upon clicking rotate the after element 135deg counterclockwise to make cross
      transform: rotate(-(180deg-45deg));
      top: 0;
      height: 1px;
    }
  }
}
